@page "/popup.html"
@using System.Globalization
@using System.Reflection
@using System.Text.Json
@using System.Text.Json.Serialization
@using trulioo_autofill.Model
@inherits BasePage
@inject IJSRuntime JSRuntime

<div class="container" style="width: 300px; height: 400px">
    <div class="row">
        <div class="col-12">
            <select id="culture" class="form-control select-culture">
                @foreach (var culture in _supportCultures)
                {
                    if(culture.Key == _currentCulture)
                    {
                        <option value="@culture.Key" selected>@culture.Value</option>
                        continue;
                    }
                    
                    <option value="@culture.Key">@culture.Value</option>
                }
            </select>
        </div>

        <div class="col-12 text-center" style="margin-top: 10px">
            <button class="btn-center btn btn-primary" @onclick="FillData">Fill Data</button>
        </div>
        
    </div>
</div>

@code {
    private IJSObjectReference? _jsModule;
    // see https://github.com/bchavez/Bogus/tree/master to see all available cultures
    private IReadOnlyDictionary<string, string> _supportCultures = new Dictionary<string, string>
    {
        { "af_ZA", "Afrikaans" },
        { "ar", "Arabic" },
        { "az", "Azerbaijani" },
        { "cz", "Czech" },
        { "de", "German" },
        { "de_AT", "German (Austria)" },
        { "de_CH", "German (Switzerland)" },
        { "el", "Greek" },
        { "en", "English" },
        { "en_AU", "English (Australia)" },
        { "en_AU_ocker", "English (Australia Ocker)" },
        { "en_BORK", "English (Bork)" },
        { "en_CA", "English (Canada)" },
        { "en_GB", "English (Great Britain)" },
        { "en_IE", "English (Ireland)" },
        { "en_IND", "English (India)" },
        { "en_NG", "Nigeria (English)" },
        { "en_US", "English (United States)" },
        { "en_ZA", "English (South Africa)" },
        { "es", "Spanish" },
        { "es_MX", "Spanish (Mexico)" },
        { "fa", "Farsi" },
        { "fi", "Finnish" },
        { "fr", "French" },
        { "fr_CA", "French (Canada)" },
        { "fr_CH", "French (Switzerland)" },
        { "ge", "Georgian" },
        { "hr", "Hrvatski" },
        { "id_ID", "Indonesia" },
        { "it", "Italian" },
        { "ja", "Japanese" },
        { "ko", "Korean" },
        { "lv", "Latvian" },
        { "nb_NO", "Norwegian" },
        { "ne", "Nepalese" },
        { "nl", "Dutch" },
        { "nl_BE", "Dutch (Belgium)" },
        { "pl", "Polish" },
        { "pt_BR", "Portuguese (Brazil)" },
        { "pt_PT", "Portuguese (Portugal)" },
        { "ro", "Romanian" },
        { "ru", "Russian" },
        { "sk", "Slovakian" },
        { "sv", "Swedish" },
        { "tr", "Turkish" },
        { "uk", "Ukrainian" },
        { "vi", "Vietnamese" },
        { "zh_CN", "Chinese" },
        { "zh_TW", "Chinese (Taiwan)" },
        { "zu_ZA", "Zulu (South Africa)" }
    };
    
    private readonly string _defaultCulture = "en";
    private string _currentCulture = null!;

    protected override async Task OnInitializedAsync()
    {
        string culture = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "culture");
        _currentCulture = string.IsNullOrWhiteSpace(culture) ? _defaultCulture : culture;
        await SetCulture(_currentCulture);
        await base.OnInitializedAsync();
    }
    
    [JSInvokable]
    public static Task SetCulture(string culture)
    {
        var cultureInfo = new CultureInfo(culture);
        Thread.CurrentThread.CurrentCulture = cultureInfo;
        Thread.CurrentThread.CurrentUICulture = cultureInfo;
        
        Console.WriteLine($"Current culture: {Thread.CurrentThread.CurrentCulture.Name}");
        
        return Task.CompletedTask;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./Pages/Popup.razor.js");

        await _jsModule.InvokeVoidAsync("initSelectCulture");

        await base.OnAfterRenderAsync(firstRender);
    }
    
    public async Task FillData()
    {
        var field = new Field();
        JsonSerializerOptions options = new()
        {
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
        };
        
        var fieldJson = JsonSerializer.Serialize(field.Generate(), options);
        await _jsModule!.InvokeVoidAsync("fillData", fieldJson);
    }

}